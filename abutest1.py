import socket
import keyboard
import time
from datetime import datetime

class SimpleKeyboardClient:
    def __init__(self, host="192.168.0.200", port=8888):
        self.host = host
        self.port = port
        self.sock = None
        self.connected = False

        self.last_cmd = None
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
        self.space_was_pressed = False
        self.enter_was_pressed = False
        self.f_was_pressed = False
        self.up_arrow_pressed = False
        self.down_arrow_pressed = False
        self.j_was_pressed = False
        self.l_was_pressed = False

        self.stats = {
            'start_time': datetime.now(),
            'commands_sent': 0,
            'connection_count': 0
        }

    def connect_to_server(self):
        try:
            print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á {self.host}:{self.port}...")
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.connect((self.host, self.port))
            self.connected = True
            self.stats['connection_count'] += 1
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            self.show_controls()
            return True
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: {e}")
            return False

    def show_controls(self):
        print("\n" + "="*60)
        print("üéÆ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°")
        print("="*60)
        print("üöÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:")
        print("   W = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤    S = ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á")
        print("   A = ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢   D = ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤")
        print("   Q = ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢    E = ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤")
        print("\nüîÑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á:")
        print("   W+A = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢    W+D = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏ß‡∏≤")
        print("   S+A = ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ã‡πâ‡∏≤‡∏¢    S+D = ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏ß‡∏≤")
        print("\n‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©:")
        print("   Space = ‡∏¢‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å‡∏™‡∏π‡∏ö")
        print("   Enter = ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡∏∏‡∏î‡∏¢‡∏¥‡∏á")
        print("   ‚Üë = Linear UP")
        print("   ‚Üì = Linear DOWN")
        print("   F = ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©")
        print("\nüõ° j: ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏Ç‡∏∂‡πâ‡∏ô")
        print("üõ° l: ‡πÄ‡∏≠‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏•‡∏á")
        print("\nüí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ‡∏Å‡∏î 0=‡∏õ‡∏¥‡∏î‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå, 1=‡πÅ‡∏£‡∏á‡∏ï‡πà‡∏≥, 2=‡πÅ‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á, 3=‡πÅ‡∏£‡∏á‡∏™‡∏π‡∏á")
        print("\n‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: Ctrl+C")
        print("="*60 + "\n")

    def get_key(self):
        # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå 0-3
        for key in ['0', '1', '2', '3']:
            if keyboard.is_pressed(key):
                return key

        # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        if keyboard.is_pressed('f') and not self.f_was_pressed:
            self.f_was_pressed = True
            return 'f'
        elif not keyboard.is_pressed('f'):
            self.f_was_pressed = False

        if keyboard.is_pressed('w') and keyboard.is_pressed('a'):
            return '3'
        elif keyboard.is_pressed('w') and keyboard.is_pressed('d'):
            return '4'
        elif keyboard.is_pressed('s') and keyboard.is_pressed('a'):
            return '1'
        elif keyboard.is_pressed('s') and keyboard.is_pressed('d'):
            return '2'
        elif keyboard.is_pressed('w'):
            return 'w'
        elif keyboard.is_pressed('s'):
            return 's'
        elif keyboard.is_pressed('a'):
            return 'a'
        elif keyboard.is_pressed('d'):
            return 'd'
        elif keyboard.is_pressed('q'):
            return 'q'
        elif keyboard.is_pressed('e'):
            return 'e'
        return 'x'

    def get_command_description(self, char):
        commands = {
            'w': '‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤',
            's': '‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á',
            'a': '‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢',
            'd': '‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤',
            'x': '‡∏´‡∏¢‡∏∏‡∏î',
            'q': '‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢',
            'e': '‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤',
            '1': '‡∏ñ‡∏≠‡∏¢‡∏ã‡πâ‡∏≤‡∏¢',
            '2': '‡∏ñ‡∏≠‡∏¢‡∏Ç‡∏ß‡∏≤',
            '3': '‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢',
            '4': '‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏ß‡∏≤',
            ' ': '‡∏¢‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å‡∏™‡∏π‡∏ö',
            'm': '‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡∏∏‡∏î‡∏¢‡∏¥‡∏á',
            'U': 'Linear UP ON',
            'u': 'Linear UP OFF',
            'O': 'Linear DOWN ON',
            'o': 'Linear DOWN OFF',
            'f': '‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©',
            'j': '‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏Ç‡∏∂‡πâ‡∏ô',
            'l': '‡πÄ‡∏≠‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏•‡∏á',
            '0': '‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏õ‡∏¥‡∏î',
            '1': '‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥',
            '2': '‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á',
            '3': '‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏£‡∏á‡∏™‡∏∏‡∏î',
        }
        return commands.get(char, '‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å')

    def send_command(self, command):
        if not self.connected or not self.sock:
            return False
        try:
            self.sock.send(command.encode())
            self.stats['commands_sent'] += 1
            desc = self.get_command_description(command)
            print(f"üì§ ‡∏™‡πà‡∏á: '{command}' - {desc}")
            return True
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ: {e}")
            self.connected = False
            return False

    def handle_special_keys(self):
        if keyboard.is_pressed('space') and not self.space_was_pressed:
            self.send_command(' ')
            self.space_was_pressed = True
        elif not keyboard.is_pressed('space'):
            self.space_was_pressed = False

        if keyboard.is_pressed('enter') and not self.enter_was_pressed:
            self.send_command('m')
            self.enter_was_pressed = True
        elif not keyboard.is_pressed('enter'):
            self.enter_was_pressed = False

        if keyboard.is_pressed('up') and not self.up_arrow_pressed:
            self.send_command('U')
            self.up_arrow_pressed = True
        elif self.up_arrow_pressed and not keyboard.is_pressed('up'):
            self.send_command('u')
            self.up_arrow_pressed = False

        if keyboard.is_pressed('down') and not self.down_arrow_pressed:
            self.send_command('O')
            self.down_arrow_pressed = True
        elif self.down_arrow_pressed and not keyboard.is_pressed('down'):
            self.send_command('o')
            self.down_arrow_pressed = False

        if keyboard.is_pressed("j") and not self.j_was_pressed:
            self.send_command("J")
            self.j_was_pressed = True
        elif self.j_was_pressed and not keyboard.is_pressed("j"):
            self.send_command("j")
            self.j_was_pressed = False

    def show_stats(self):
        uptime = datetime.now() - self.stats['start_time']
        uptime_str = str(uptime).split('.')[0]
        print("\n" + "="*50)
        print("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print("="*50)
        print(f"‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {uptime_str}")
        print(f"üì§ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á: {self.stats['commands_sent']}")
        print(f"üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {self.stats['connection_count']}")
        print(f"üåê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {'‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' if self.connected else '‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}")
        print("="*50 + "\n")

    def control_loop(self):
        try:
            print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° - ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å")
            while self.connected:
                cmd = self.get_key()
                if cmd != self.last_cmd:
                    if not self.send_command(cmd):
                        break
                    self.last_cmd = cmd
                self.handle_special_keys()
                time.sleep(0.05)
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î (Ctrl+C)")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def disconnect(self):
        if self.sock:
            try:
                self.sock.send(b'x')  # ‡∏™‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î
                self.sock.close()
            except:
                pass
        self.connected = False
        print("üîå ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")

def main():
    client = SimpleKeyboardClient()
    if client.connect_to_server():
        client.control_loop()
        client.show_stats()
        client.disconnect()
    else:
        print("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞ IP:PORT")

if __name__ == "__main__":
    main()
