#include <Arduino.h>
#include <HardwareSerial.h>

#define PWM1 25
#define DIR1 26

char cmdBuffer[10];  // buffer ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
int cmdCount = 0;

const int Cylinder_Bounce_ball = 5;
const int Cylinder_Receive = 18;
const int Cylinder_drawer = 19;

const int pwmChannel1 = 0;
const int pwmFreq = 5000;
const int pwmResolution = 12;

HardwareSerial SerialUART(1);

bool movingUp = false;
bool movingDown = false;
bool allowUp = true;
bool allowDown = false;

bool passedBottom = false;
bool passedTop = false;

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö state ‡∏¢‡∏¥‡∏á‡∏ö‡∏≠‡∏•‡πÅ‡∏ö‡∏ö non-blocking
enum BounceBallState { IDLE, DRAWER_ON, BOUNCE_ON, BOUNCE_OFF, FINISHED };
BounceBallState bounceState = IDLE;
unsigned long bounceMillis = 0;

void stopMotor() {
  ledcWrite(pwmChannel1, 0);
  digitalWrite(DIR1, LOW);
  movingUp = false;
  movingDown = false;
  passedBottom = false;
  passedTop = false;
}

void setup() {
  Serial.begin(115200);
  SerialUART.begin(115200, SERIAL_8N1, -1, 17);
  ledcSetup(pwmChannel1, pwmFreq, pwmResolution);
  ledcAttachPin(PWM1, pwmChannel1);

  pinMode(DIR1, OUTPUT);
  pinMode(Cylinder_Bounce_ball, OUTPUT);
  pinMode(Cylinder_Receive, OUTPUT);
  pinMode(Cylinder_drawer, OUTPUT);

  stopMotor();
  Serial.println("ESP32 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏¥‡∏á‡∏ö‡∏≠‡∏•‡πÅ‡∏ö‡∏ö non-blocking
void updateBounceBall() {
  unsigned long now = millis();

  switch (bounceState) {
    case IDLE:
      // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
      break;

    case DRAWER_ON:
      digitalWrite(Cylinder_drawer, HIGH);
      bounceMillis = now;
      bounceState = BOUNCE_ON;
      break;

    case BOUNCE_ON:
      if (now - bounceMillis >= 1500) {
        digitalWrite(Cylinder_Bounce_ball, HIGH);
        digitalWrite(Cylinder_Receive, HIGH);
        bounceMillis = now;
        bounceState = BOUNCE_OFF;
      }
      break;

    case BOUNCE_OFF:
      if (now - bounceMillis >= 100) {
        digitalWrite(Cylinder_Bounce_ball, LOW);
        bounceMillis = now;
        bounceState = FINISHED;
      }
      break;

    case FINISHED:
      if (now - bounceMillis >= 500) {
        digitalWrite(Cylinder_Receive, LOW);
        bounceMillis = now;
        bounceState = (BounceBallState)100; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏±‡∏Å‡∏£‡∏≠‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å
      }
      break;

    case (BounceBallState)100:
      if (now - bounceMillis >= 1000) {
        digitalWrite(Cylinder_drawer, LOW);
        bounceState = IDLE;
        Serial.println("‚ö° ‡∏¢‡∏¥‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
      }
      break;
  }
}

void handleCommand(char c) {
  if ((movingUp || movingDown) && (c == 'k' || c == 'l')) {
    Serial.println("‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á");
    return;
  }

  switch (c) {

    case 'x':
      stopMotor();
      break;

    case 'b':
      if (bounceState == IDLE) {
        bounceState = DRAWER_ON;
        Serial.println("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏¥‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•");
      } else {
        Serial.println("‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏¥‡∏á‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•‡∏≠‡∏¢‡∏π‡πà");
      }
      break;

    case 'M':
      digitalWrite(Cylinder_drawer, HIGH);
      break;

    case 'm':
      digitalWrite(Cylinder_drawer, LOW);
      break;

    case 'N':
      digitalWrite(Cylinder_Receive, HIGH);
      break;

    case 'n':
      digitalWrite(Cylinder_Receive, LOW);
      break;

    default:
      Serial.println("‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å");
      break;
  }
}

void loop() {
  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (multi-command)
  while (Serial.available()) {
    char c = Serial.read();
    Serial.print("üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ");
    Serial.println(c);
    SerialUART.write(c);
    handleCommand(c);
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏¥‡∏á‡∏ö‡∏≠‡∏•‡πÅ‡∏ö‡∏ö non-blocking
  updateBounceBall();
}
