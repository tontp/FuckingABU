import socket
import keyboard
import time
from datetime import datetime


class SimpleKeyboardClient:
    def __init__(self, host="192.168.0.214", port=8888):
        self.host = host
        self.port = port
        self.sock = None
        self.connected = False

        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
        self.last_cmd = None
        self.space_was_pressed = False
        self.enter_was_pressed = False
        self.f_was_pressed = False
        self.up_arrow_pressed = False
        self.down_arrow_pressed = False
        self.j_was_pressed = False
        self.l_was_pressed = False

        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.stats = {
            "start_time": datetime.now(),
            "commands_sent": 0,
            "connection_count": 0,
        }

    def connect_to_server(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Raspberry Pi"""
        try:
            print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á {self.host}:{self.port}...")
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.connect((self.host, self.port))
            self.connected = True
            self.stats["connection_count"] += 1

            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            print("üéÆ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå!")
            self.show_controls()
            return True

        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: {e}")
            return False

    def show_controls(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°"""
        print("\n" + "=" * 60)
        print("üéÆ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°")
        print("=" * 60)
        print("üöÄ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:")
        print("   W = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤    S = ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á")
        print("   A = ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢   D = ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤")
        print("   Q = ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢    E = ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤")
        print("\nüîÑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á:")
        print("   W+A = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢    W+D = ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏ß‡∏≤")
        print("   S+A = ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ã‡πâ‡∏≤‡∏¢    S+D = ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏ß‡∏≤")
        print("\n‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©:")
        print("   Space = ‡∏¢‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å‡∏™‡∏π‡∏ö")
        print("   Enter = ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡∏∏‡∏î‡∏¢‡∏¥‡∏á")
        print("   ‚Üë = Linear UP")
        print("   ‚Üì = Linear DOWN")
        print("   F = ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©")
        print("\n‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: Ctrl+C")
        print("=" * 60 + "\n")
        print(" üõ°j: ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏Ç‡∏∂‡πâ‡∏ô \n")
        print("  üõ°l: ‡πÄ‡∏≠‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏•‡∏á")

    def get_key(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö F key (toggle)
        if keyboard.is_pressed("f") and not self.f_was_pressed:
            self.f_was_pressed = True
            return "f"
        elif not keyboard.is_pressed("f"):
            self.f_was_pressed = False

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á (‡∏Å‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
        if keyboard.is_pressed("w") and keyboard.is_pressed("a"):
            return "3"  # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢
        elif keyboard.is_pressed("w") and keyboard.is_pressed("d"):
            return "4"  # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏ß‡∏≤
        elif keyboard.is_pressed("s") and keyboard.is_pressed("a"):
            return "1"  # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ã‡πâ‡∏≤‡∏¢
        elif keyboard.is_pressed("s") and keyboard.is_pressed("d"):
            return "2"  # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏ß‡∏≤

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        elif keyboard.is_pressed("w"):
            return "w"  # ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        elif keyboard.is_pressed("s"):
            return "s"  # ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
        elif keyboard.is_pressed("a"):
            return "a"  # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢
        elif keyboard.is_pressed("d"):
            return "d"  # ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤
        elif keyboard.is_pressed("q"):
            return "q"  # ‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
        elif keyboard.is_pressed("e"):
            return "e"  # ‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤

        # ‡∏´‡∏¢‡∏∏‡∏î (‡πÑ‡∏°‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏î‡πÄ‡∏•‡∏¢)
        return "x"

    def get_command_description(self, char):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"""
        commands = {
            "w": "‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
            "s": "‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á",
            "a": "‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢",
            "d": "‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤",
            "x": "‡∏´‡∏¢‡∏∏‡∏î",
            "q": "‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢",
            "e": "‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤",
            "1": "‡∏ñ‡∏≠‡∏¢‡∏ã‡πâ‡∏≤‡∏¢",
            "2": "‡∏ñ‡∏≠‡∏¢‡∏Ç‡∏ß‡∏≤",
            "3": "‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢",
            "4": "‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏ß‡∏≤",
            " ": "‡∏¢‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å‡∏™‡∏π‡∏ö",
            "m": "‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡∏∏‡∏î‡∏¢‡∏¥‡∏á",
            "U": "Linear UP ON",
            "u": "Linear UP OFF",
            "O": "Linear DOWN ON",
            "o": "Linear DOWN OFF",
            "f": "‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©",
            "j": "‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏Ç‡∏∂‡πâ‡∏ô",
            "l": "‡πÄ‡∏≠‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏•‡∏á",
        }
        return commands.get(char, "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å")

    def send_command(self, command):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á server"""
        if not self.connected or not self.sock:
            return False

        try:
            self.sock.send(command.encode())
            self.stats["commands_sent"] += 1

            desc = self.get_command_description(command)
            print(f"üì§ ‡∏™‡πà‡∏á: '{command}' - {desc}")
            return True

        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ: {e}")
            self.connected = False
            return False

    def handle_special_keys(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö toggle"""
        # Space bar (‡∏¢‡∏¥‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏≠‡∏Å‡∏™‡∏π‡∏ö)
        if keyboard.is_pressed("space") and not self.space_was_pressed:
            self.send_command(" ")
            self.space_was_pressed = True
        elif not keyboard.is_pressed("space"):
            self.space_was_pressed = False

        # Enter (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡∏∏‡∏î‡∏¢‡∏¥‡∏á)
        if keyboard.is_pressed("enter") and not self.enter_was_pressed:
            self.send_command("m")
            self.enter_was_pressed = True
        elif not keyboard.is_pressed("enter"):
            self.enter_was_pressed = False

        # Up Arrow (Linear UP)
        if keyboard.is_pressed("up") and not self.up_arrow_pressed:
            self.send_command("U")
            self.up_arrow_pressed = True
        elif self.up_arrow_pressed and not keyboard.is_pressed("up"):
            self.send_command("u")
            self.up_arrow_pressed = False

        # Down Arrow (Linear DOWN)
        if keyboard.is_pressed("down") and not self.down_arrow_pressed:
            self.send_command("O")
            self.down_arrow_pressed = True
        elif self.down_arrow_pressed and not keyboard.is_pressed("down"):
            self.send_command("o")
            self.down_arrow_pressed = False

        # ‡∏õ‡∏∏‡πà‡∏° j (‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•)
        if keyboard.is_pressed("j") and not self.j_was_pressed:
            self.send_command("J")  # ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏Ç‡∏∂‡πâ‡∏ô
            self.j_was_pressed = True
        elif self.j_was_pressed and not keyboard.is_pressed("j"):
            self.send_command("j")  # ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏Å
            self.j_was_pressed = False

        # ‡∏õ‡∏∏‡πà‡∏° l (‡πÄ‡∏≠‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏•‡∏•‡∏á)
        if keyboard.is_pressed("l") and not self.l_was_pressed:
            self.send_command("L")  # ‡πÄ‡∏≠‡∏≤‡∏•‡∏á
            self.l_was_pressed = True
        elif self.l_was_pressed and not keyboard.is_pressed("l"):
            self.send_command("l")  # ‡∏´‡∏¢‡∏∏‡∏î
            self.l_was_pressed = False

    def show_stats(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        uptime = datetime.now() - self.stats["start_time"]
        uptime_str = str(uptime).split(".")[0]

        print("\n" + "=" * 50)
        print("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print("=" * 50)
        print(f"‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {uptime_str}")
        print(f"üì§ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á: {self.stats['commands_sent']}")
        print(f"üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {self.stats['connection_count']}")
        print(f"üåê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {'‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' if self.connected else '‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}")
        print("=" * 50 + "\n")

    def control_loop(self):
        """‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°"""
        try:
            print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° - ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å")

            while self.connected:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
                cmd = self.get_key()

                # ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                if cmd != self.last_cmd:
                    if not self.send_command(cmd):
                        break
                    self.last_cmd = cmd

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©
                self.handle_special_keys()

                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                time.sleep(0.05)

        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î (Ctrl+C)")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    def disconnect(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if self.sock:
            try:
                # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
                self.sock.send(b"x")
                time.sleep(0.1)
                self.sock.close()
            except:
                pass

        self.connected = False
        print("üîå ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")

    def run(self):
        """‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å"""
        print("=" * 60)
        print("üéÆ SIMPLE KEYBOARD ROBOT CONTROLLER")
        print("=" * 60)

        # ‡∏£‡∏±‡∏ö IP ‡πÅ‡∏•‡∏∞ Port
        ip_input = input(f"Enter Raspberry Pi IP (default: {self.host}): ").strip()
        if ip_input:
            self.host = ip_input

        port_input = input(f"Enter port (default: {self.port}): ").strip()
        if port_input:
            try:
                self.port = int(port_input)
            except ValueError:
                print("‚ùå Port ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default")

        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        if not self.connect_to_server():
            return

        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
            self.control_loop()
        finally:
            self.disconnect()
            self.show_stats()
            print("üëã ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")


def main():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á keyboard library ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    try:
        import keyboard
    except ImportError:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á keyboard library:")
        print("pip install keyboard")
        return

    client = SimpleKeyboardClient()
    client.run()


if __name__ == "__main__":
    main()
