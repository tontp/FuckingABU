from pydualsense import pydualsense
import socket
import time
from datetime import datetime

class PS5ControllerClient:
    def __init__(self, host="192.168.0.214", port=8889):
        self.host = host
        self.port = port
        self.sock = None
        self.connected = False
        self.last_cmd = None
        self.shoot_level = 0
        self.last_l2_state = False  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏î L2 ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        self.square_state = False   # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°

        self.stats = {
            'start_time': datetime.now(),
            'commands_sent': 0,
            'connection_count': 0
        }

        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≠‡∏¢‡∏î‡πâ‡∏ß‡∏¢ pydualsense
        self.dualsense = pydualsense()
        self.dualsense.init()
        if not self.dualsense.connected:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≠‡∏¢ PS5")
            exit()
        self.dualsense.light.setColorI(0,0,255)  # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

    def connect_to_server(self):
        try:
            print(f"üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á {self.host}:{self.port}...")
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.connect((self.host, self.port))
            self.connected = True
            self.stats['connection_count'] += 1
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéÆ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°")
            return True
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: {e}")
            return False

    def set_lightbar_color(self, level):
        if level == 0:
            self.dualsense.light.setColorI(0, 0, 255)     # ‡∏ü‡πâ‡∏≤
        elif level == 1:
            self.dualsense.light.setColorI(0, 255, 0)     # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        elif level == 2:
            self.dualsense.light.setColorI(255, 165, 0)   # ‡∏™‡πâ‡∏°
        elif level == 3:
            self.dualsense.light.setColorI(255, 0, 0)     # ‡πÅ‡∏î‡∏á

    def get_command_from_controller(self):
        s = self.dualsense.state
        lx, ly = s.LX, s.LY
        rx, ry = s.RX, s.RY
        threshold = 20

        # ‡∏™‡∏ï‡∏¥‡πä‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
        if ly < -30 - threshold:
            if lx < -30 - threshold:
                return '6'
            elif lx > 30 + threshold:
                return '7'
            else:
                return 'w'
        elif ly > 30 + threshold:
            if lx < -30 - threshold:
                return '8'
            elif lx > 30 + threshold:
                return '9'
            else:
                return 's'
        elif lx < -30 - threshold:
            return 'a'
        elif lx > 30 + threshold:
            return 'd'
        elif rx < -30 - threshold:
            return 'q'
        elif rx > 30 + threshold:
            return 'e'

        # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        if s.triangle:   # ‡∏Å‡∏î‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° -> ‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            return 'k'
        if s.cross:      # ‡∏Å‡∏î x -> ‡∏¢‡∏Å‡∏•‡∏á
            return 'l'
        if s.circle:
            return 'b'
        if s.L1:
            return ' '
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏° ‡∏Å‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏™‡πà‡∏á 'M' ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏™‡πà‡∏á 'm' ‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô
        if s.square:
            if not getattr(self, 'square_last_state', False):
                self.square_state = not self.square_state
                self.square_last_state = True
                if self.square_state:
                    return 'M'  # HIGH
                else:
                    return 'm'  # LOW
        else:
            self.square_last_state = False

        if s.touchBtn:
            return 'f'

        # R1 ‡πÅ‡∏•‡∏∞ R2 ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° linear_UP / linear_DOWN
        if s.R1:
            return 'U'
        if s.R2:
            return 'O'

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ L2 (‡∏Å‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        if s.L2Btn and not self.last_l2_state:
            self.shoot_level = (self.shoot_level + 1) % 4
            self.set_lightbar_color(self.shoot_level)
            self.last_l2_state = True
            return str(self.shoot_level)
        elif not s.L2Btn:
            self.last_l2_state = False

        # D-pad (‡∏™‡∏≥‡∏£‡∏≠‡∏á)
        if getattr(s, 'DpadUp', False):
            return 'w'
        if getattr(s, 'DpadRight', False):
            return 'd'
        if getattr(s, 'DpadDown', False):
            return 's'
        if getattr(s, 'DpadLeft', False):
            return 'a'
        if getattr(s, 'DpadUp', False) and getattr(s, 'DpadRight', False):
            return '6'
        if getattr(s, 'DpadUp', False) and getattr(s, 'DpadLeft', False):
            return '7'
        if getattr(s, 'DpadDown', False) and getattr(s, 'DpadRight', False):
            return '8'
        if getattr(s, 'DpadDown', False) and getattr(s, 'DpadLeft', False):
            return '9'

        return 'x'  # ‡πÑ‡∏°‡πà‡∏Å‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢

    def send_command(self, command):
        if not self.connected:
            return False
        try:
            self.sock.send(command.encode())
            self.stats['commands_sent'] += 1
            print(f"üì§ ‡∏™‡πà‡∏á: {command}")
            return True
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á: {e}")
            self.connected = False
            return False

    def control_loop(self):
        print("üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≠‡∏¢ PS5 (‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î)")
        try:
            while self.connected:
                cmd = self.get_command_from_controller()
                if cmd != self.last_cmd:
                    self.send_command(cmd)
                    self.last_cmd = cmd
                time.sleep(0.05)
        except KeyboardInterrupt:
            print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
        finally:
            self.disconnect()

    def disconnect(self):
        if self.sock:
            try:
                self.sock.send(b'x')
                self.sock.close()
            except:
                pass
        self.dualsense.close()
        self.connected = False
        print("üîå ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")

    def run(self):
        if not self.connect_to_server():
            return
        self.control_loop()
        print("üìä ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", self.stats['commands_sent'])
        print("üëã ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

if __name__ == "__main__":
    PS5ControllerClient().run()
