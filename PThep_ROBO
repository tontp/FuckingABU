from pydualsense import pydualsense
import socket
import time
import threading

class PS5ControllerClient:
    def __init__(self, host="192.168.0.110", port=8888):
        self.host = host
        self.port = port
        self.sock = None
        self.connected = False
        self.speed_level = 2
        self.last_options_state = False
        self.last_cmd = "x"
        self.current_cmd = "x"
        self.cmd_lock = threading.Lock()
        self.running = True

        self.dualsense = pydualsense()
        self.dualsense.init()
        if not self.dualsense.connected:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≠‡∏¢ PS5")
            exit()
        self.set_led_color()

    def set_led_color(self):
        color = (0, 255, 0) if self.speed_level == 1 else (255, 0, 0)
        self.dualsense.light.setColorI(*color)

    def toggle_speed(self):
        self.speed_level = 2 if self.speed_level == 1 else 1
        self.set_led_color()
        print(f"‚öôÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö {self.speed_level}")

    def connect_to_server(self):
        try:
            print(f"üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á {self.host}:{self.port}...")
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
            self.sock.connect((self.host, self.port))
            self.connected = True
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return True
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: {e}")
            return False

    def read_controller_loop(self):
        threshold = 50
        prev_cmd = ""

        while self.running:
            s = self.dualsense.state

            # toggle speed ‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏° options
            if s.options and not self.last_options_state:
                self.toggle_speed()
                self.last_options_state = True
            elif not s.options:
                self.last_options_state = False

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö joystick ‡∏ã‡πâ‡∏≤‡∏¢
            stick_cmds = []
            if s.LY < -threshold: stick_cmds.append("w")
            elif s.LY > threshold: stick_cmds.append("s")
            if s.LX < -threshold: stick_cmds.append("a")
            elif s.LX > threshold: stick_cmds.append("d")

            # joystick ‡∏Ç‡∏ß‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏∏‡∏ô
            if s.RX < -threshold: stick_cmds.append("q")
            elif s.RX > threshold: stick_cmds.append("e")

            # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
            other_cmds = []
            if s.DpadUp: other_cmds.append("h")
            # if s.DpadDown: other_cmds.append("P")
            if s.L1: other_cmds.append("y")
            if s.L2: other_cmds.append("P")
            if s.R1: other_cmds.append("u")
            if s.R2: other_cmds.append("o")
            if s.cross: other_cmds.append("m")
            if s.touchBtn: other_cmds.append("f")
            if s.circle: other_cmds.append("c")

            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            if stick_cmds:
                new_cmd = "".join(stick_cmds)
            elif other_cmds:
                new_cmd = "".join(other_cmds)
            else:
                new_cmd = "x"  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡πÄ‡∏•‡∏¢ = ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

            if new_cmd != prev_cmd:
                with self.cmd_lock:
                    self.current_cmd = new_cmd
                prev_cmd = new_cmd

            time.sleep(0.005)

    def send_command(self, command):
        if not self.connected or command == self.last_cmd:
            return False
        try:
            full_cmd = f"{command}:{self.speed_level}\n"
            self.sock.sendall(full_cmd.encode())
            self.last_cmd = command
            print(f"üì§ ‡∏™‡πà‡∏á: {full_cmd.strip()}")
            return True
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á: {e}")
            self.connected = False
            return False

    def control_loop(self):
        print("üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏≠‡∏¢ PS5 (Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î)")
        reader_thread = threading.Thread(target=self.read_controller_loop, daemon=True)
        reader_thread.start()

        try:
            while self.connected:
                with self.cmd_lock:
                    cmd = self.current_cmd
                self.send_command(cmd)
                time.sleep(0.01)
        except KeyboardInterrupt:
            print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö")
        finally:
            self.running = False
            reader_thread.join()
            self.disconnect()

    def disconnect(self):
        if self.sock:
            try:
                self.sock.send(b"x:1\n")
                self.sock.close()
            except:
                pass
        self.dualsense.close()
        self.connected = False
        print("üîå ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")

    def run(self):
        if not self.connect_to_server():
            return
        self.control_loop()
        print("üëã ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

if __name__ == "__main__":
    PS5ControllerClient().run()
